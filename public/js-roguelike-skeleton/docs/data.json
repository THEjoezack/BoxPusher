{
    "project": {},
    "files": {
        "src/mixins/action-interface.js": {
            "name": "src/mixins/action-interface.js",
            "modules": {},
            "classes": {
                "PerformableActionInterface": 1,
                "ResolvableActionInterface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/action.js": {
            "name": "src/action.js",
            "modules": {},
            "classes": {
                "PerformableAction": 1,
                "ResolvableAction": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/array-2d.js": {
            "name": "src/array-2d.js",
            "modules": {},
            "classes": {
                "Array2d": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/console.js": {
            "name": "src/console.js",
            "modules": {},
            "classes": {
                "Console": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/entity.js": {
            "name": "src/entity.js",
            "modules": {},
            "classes": {
                "Entity": 1,
                "Entity.Types": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fov-rot.js": {
            "name": "src/fov-rot.js",
            "modules": {},
            "classes": {
                "FovROT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/game.js": {
            "name": "src/game.js",
            "modules": {},
            "classes": {
                "Game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/input.js": {
            "name": "src/input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting-rot.js": {
            "name": "src/lighting-rot.js",
            "modules": {},
            "classes": {
                "LightingROT": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/map.js": {
            "name": "src/map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mixins.js": {
            "name": "src/mixins.js",
            "modules": {},
            "classes": {
                "Mixins": 1,
                "TileDraw": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mouse.js": {
            "name": "src/mouse.js",
            "modules": {},
            "classes": {
                "Mouse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/multi-object-manager.js": {
            "name": "src/multi-object-manager.js",
            "modules": {},
            "classes": {
                "MultiObjectManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/object-manager.js": {
            "name": "src/object-manager.js",
            "modules": {},
            "classes": {
                "ObjectManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/player.js": {
            "name": "src/player.js",
            "modules": {},
            "classes": {
                "Player": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/renderer-layer.js": {
            "name": "src/renderer-layer.js",
            "modules": {},
            "classes": {
                "RendererLayer": 1,
                "RendererLayer.Types": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/renderer.js": {
            "name": "src/renderer.js",
            "modules": {},
            "classes": {
                "Renderer": 1,
                "TileDrawData": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/tile.js": {
            "name": "src/tile.js",
            "modules": {},
            "classes": {
                "Tile": 1,
                "Tile.Types": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util.js": {
            "name": "src/util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/valid-targets-finder.js": {
            "name": "src/valid-targets-finder.js",
            "modules": {},
            "classes": {
                "ValidTargetsFinder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/valid-targets.js": {
            "name": "src/valid-targets.js",
            "modules": {},
            "classes": {
                "ValidTargets": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "PerformableActionInterface": {
            "name": "PerformableActionInterface",
            "shortname": "PerformableActionInterface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mixins/action-interface.js",
            "line": 4,
            "description": "Surface API to handle {{#crossLink \"PerformableAction\"}}{{/crossLink}} implementations.\nThis allows a source object and target object to have separate action resolution logic without directly referencing eachother.\nSee also {{#crossLink \"ResolvableActionInterface\"}}{{/crossLink}}, {{#crossLink \"ResolvableAction\"}}{{/crossLink}}",
            "static": 1
        },
        "ResolvableActionInterface": {
            "name": "ResolvableActionInterface",
            "shortname": "ResolvableActionInterface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mixins/action-interface.js",
            "line": 169,
            "description": "Surface API to handle {{#crossLink \"ResolvableAction\"}}{{/crossLink}} implementations.\nThis allows a source object and target object to have separate action resolution logic without directly referencing eachother.\nSee also {{#crossLink \"PerformableActionInterface\"}}{{/crossLink}}, {{#crossLink \"PerformableAction\"}}{{/crossLink}}",
            "static": 1
        },
        "PerformableAction": {
            "name": "PerformableAction",
            "shortname": "PerformableAction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/action.js",
            "line": 4,
            "description": "A performable action implementation.\nHandles the resolution of a source object performing an action on a target object.\nPerformable action logic is attached to and primarily related to the source.\nMethods on this object should only be called by the {{#crossLink \"PerformableActionInterface\"}}\n\nIf any of the functions on this object should always return `true` or `false`\n  it can be set to a `Boolean` value that will be used\n  instead of the value returned by calling the function.",
            "static": 1
        },
        "ResolvableAction": {
            "name": "ResolvableAction",
            "shortname": "ResolvableAction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/action.js",
            "line": 85,
            "description": "A resolvable action implementation.\nHandles the resolution of a source object performing an action on a target object.\nResolvable action logic is attached to and primarily related to the target.\nMethods on this object should only be called by the {{#crossLink \"ResolvableActionInterface\"}}{{/crosslink}}\n\nIf any of the functions on this object should always return `true` or `false`\n  it can be set to a `Boolean` value that will be used\n  instead of the value returned by calling the function.",
            "static": 1
        },
        "Array2d": {
            "name": "Array2d",
            "shortname": "Array2d",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/array-2d.js",
            "line": 4,
            "description": "Manages a 2d array of values mapped to x,y coords.\ncoord data methods to help with data maniuplation and searching (getAdjacent, findNearest, filter, getWithinSquareRadius etc.)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "- Width of the 2d Array.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height of the 2d Array.",
                    "type": "Number"
                }
            ]
        },
        "Console": {
            "name": "Console",
            "shortname": "Console",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/console.js",
            "line": 4,
            "description": "Manages the display and history of console messages to the user.\n\"The troll hits you dealing 10 damage.\"\n\"You die.\"",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "messageHistoryCount",
                    "description": "- Number of messages to display at once.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "5"
                },
                {
                    "name": "elClassName",
                    "description": "- Css class name to assign to the console element.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'console'"
                }
            ]
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/entity.js",
            "line": 6,
            "description": "Represents an entity in the game. Usually a character or enemy.\nManages state (position, health, stats, etc)\nOccupies a single game map tile.",
            "is_constructor": 1,
            "uses": [
                "TileDraw"
            ],
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "type",
                    "description": "- Type of entity. When created this object is merged with the value of Entity.Types[type].",
                    "type": "String"
                }
            ]
        },
        "Entity.Types": {
            "name": "Entity.Types",
            "shortname": "Entity.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/entity.js",
            "line": 194,
            "description": "Describes different types of entities. Used by the Entity constructor 'type' param.\n\n    Entity.Types = {\n        zombie: {\n           name: 'Zombie',\n           char: 'z',\n           color: 'red',\n           bgColor: '#222'\n        },\n        // ...\n    }",
            "static": 1
        },
        "FovROT": {
            "name": "FovROT",
            "shortname": "FovROT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/fov-rot.js",
            "line": 4,
            "description": "Represents a FovROT in the game map. requires ROT.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                }
            ]
        },
        "Game": {
            "name": "Game",
            "shortname": "Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/game.js",
            "line": 4,
            "description": "Container for all game objects.\nHandles updating the state of game objects each turn.\nListens for player input to trigger and resolve new turns.",
            "is_constructor": 1
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/input.js",
            "line": 4,
            "description": "Helper for binding user key input to actions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "onKeyAction",
                    "description": "- Function called when a key bound to an action is pressed (function(action){}).",
                    "type": "Function"
                },
                {
                    "name": "bindings",
                    "description": "- An object of key val pairs mapping an action to an array of keys that trigger it. Input.Keys is used to convert input key string names to key codes.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "action1",
                            "description": "Input keys mapped to action1. ['A', 'B', ...]",
                            "type": "Array"
                        },
                        {
                            "name": "action2",
                            "description": "Input keys mapped to action2. ['X', 'Y', ...]",
                            "type": "Array"
                        },
                        {
                            "name": "...",
                            "description": ""
                        }
                    ]
                }
            ],
            "example": [
                "\n       //bindings param example:\n       {\n           up: ['UP_ARROW'],\n           down: ['DOWN_ARROW'],\n           left: ['LEFT_ARROW'],\n           right: ['RIGHT_ARROW'],\n       }"
            ]
        },
        "LightingROT": {
            "name": "LightingROT",
            "shortname": "LightingROT",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/lighting-rot.js",
            "line": 4,
            "description": "Represents lighting in the game map. requires ROT.js\nManages position of lights.\nCalculates illumination of map tiles.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "settings",
                    "description": "- LightingROT settings object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "range",
                            "description": "- Maximum range for the most powerful light source.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "passes",
                            "description": "- Number of computation passes (1: no reflectivity used, 2: reflectivity used)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "emissionThreshold",
                            "description": "- Minimal amount of light at a cell to be re-emited (only for passes>1).",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/map.js",
            "line": 4,
            "description": "Manages map Tiles. Depends on Array2d (array-2d.js).",
            "extends": "Array2d",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                }
            ]
        },
        "Mixins": {
            "name": "Mixins",
            "shortname": "Mixins",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mixins.js",
            "line": 4,
            "description": "Mixins. Collections of properties to be mixed into objects.\nFunctionality is placed in a mixin so that it can be shared by multiple objects without repeating the same code.\nModifications to mixin functionality will be reflected in all objects using this mixin.\nIf the mixin code was copied and pasted, code changes would need to be made in multiple places.\nNo flexibility is lost as objects with mixins added to them may still override or extend the mixed in functionality.",
            "static": 1
        },
        "TileDraw": {
            "name": "TileDraw",
            "shortname": "TileDraw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Entity",
                "Player",
                "Tile"
            ],
            "file": "src/mixins.js",
            "line": 15,
            "description": "Adds the functionality required for a `Renderer` or `RendererLayer` to retrieve `TileDrawData` from an object.",
            "static": 1
        },
        "Mouse": {
            "name": "Mouse",
            "shortname": "Mouse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mouse.js",
            "line": 4,
            "description": "Helper for handling user mouse input.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "onClick",
                    "description": "- A function to handle mouse click events. function(x, y){}",
                    "type": "Function"
                },
                {
                    "name": "onHover",
                    "description": "- A function to handle mouse hover events. function(x, y){}",
                    "type": "Function"
                }
            ]
        },
        "MultiObjectManager": {
            "name": "MultiObjectManager",
            "shortname": "MultiObjectManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/multi-object-manager.js",
            "line": 4,
            "description": "Manages a list of object and their tile positions.\nMultiple objects can be at a given tile map coord.\nHandles adding, removing, moving objects within the game.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this `MultiObjectManager` is attached to.",
                    "type": "Game"
                },
                {
                    "name": "ObjectConstructor",
                    "description": "- Object constructor used to create new objects with `this.add()`.",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "- Width of current map in tiles.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "- Height of current map in tiles.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "ObjectManager": {
            "name": "ObjectManager",
            "shortname": "ObjectManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/object-manager.js",
            "line": 4,
            "description": "Manages a list of all objects and their tile positions.\nHandles adding, removing, moving objects within the game.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this `ObjectManager` is attached to.",
                    "type": "Game"
                },
                {
                    "name": "ObjectConstructor",
                    "description": "- Object constructor used to create new objects with `this.add()`.",
                    "type": "Object"
                },
                {
                    "name": "width",
                    "description": "- Width of current map in tiles.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "- Height of current map in tiles.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "Player": {
            "name": "Player",
            "shortname": "Player",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/player.js",
            "line": 4,
            "description": "Represents the player.\nVery similar to Entity\nHandles functionality triggered by keyboard and mouse Input",
            "is_constructor": 1,
            "uses": [
                "TileDraw"
            ],
            "params": [
                {
                    "name": "game",
                    "description": "- game instance this obj is attached to",
                    "type": "Game"
                }
            ]
        },
        "RendererLayer": {
            "name": "RendererLayer",
            "shortname": "RendererLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/renderer-layer.js",
            "line": 4,
            "description": "Represents a map tile layer to be rendered.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "type",
                    "description": "- Type of `RendererLayer`. When created this object is merged with the value of `RendererLayer.Types[type]`.",
                    "type": "String"
                }
            ]
        },
        "RendererLayer.Types": {
            "name": "RendererLayer.Types",
            "shortname": "RendererLayer.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/renderer-layer.js",
            "line": 131,
            "description": "Describes different types of `RendererLayer`. Used by the `RendererLayer` constructor `type` param.\n\n    RendererLayer.Types = {\n\n        // ...\n    }",
            "static": 1
        },
        "Renderer": {
            "name": "Renderer",
            "shortname": "Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/renderer.js",
            "line": 4,
            "description": "Renders the current game state using html5 canvas.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "width",
                    "description": "- Width of the map view in tiles.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height of the map view in tiles.",
                    "type": "Number"
                },
                {
                    "name": "tileSize",
                    "description": "- Width and height of tiles when drawn.",
                    "type": "Number"
                },
                {
                    "name": "canvasClassName",
                    "description": "- Css class name for the canvas element.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'renderer'"
                }
            ]
        },
        "TileDrawData": {
            "name": "TileDrawData",
            "shortname": "TileDrawData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/renderer.js",
            "line": 441,
            "description": "An object litteral containing data used by 'Renderer' to draw a map tile.\nOnly one `TileDrawData` object is used per tile when rendering.\nThe final `TileDrawData` object used to draw may have been created by merging multiple `TileDrawData` objects from multiple sources.",
            "static": 1
        },
        "Tile": {
            "name": "Tile",
            "shortname": "Tile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tile.js",
            "line": 6,
            "description": "Represents a tile in the game map.",
            "is_constructor": 1,
            "uses": [
                "TileDraw"
            ],
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "- Type of tile. When created this object is merged with the value of Tile.Types[type].",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- The map tile coordinate position of this tile on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map tile coordinate position of this tile on the y axis.",
                    "type": "Number"
                }
            ]
        },
        "Tile.Types": {
            "name": "Tile.Types",
            "shortname": "Tile.Types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/tile.js",
            "line": 170,
            "description": "Describes different types of tiles. Used by the Tile constructor 'type' param.\n\n    Tile.Types = {\n        floor: {\n           name: 'Floor',\n           char: '.',\n           color: '#333',\n           bgColor: '#111',\n           passable: true,\n           blocksLos: false\n        },\n        // ...\n    }",
            "static": 1
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/util.js",
            "line": 44,
            "description": "Utility functions.",
            "static": 1
        },
        "ValidTargetsFinder": {
            "name": "ValidTargetsFinder",
            "shortname": "ValidTargetsFinder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/valid-targets-finder.js",
            "line": 4,
            "description": "Gets a list of valid targets filtered by provided criteria.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "",
                    "type": "Game"
                },
                {
                    "name": "settings",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "x",
                            "description": "- The x map tile coord to use as the origin of the attack.",
                            "type": "Number"
                        },
                        {
                            "name": "y",
                            "description": "- The y map tile coord to use as the origin of the attack.",
                            "type": "Number"
                        },
                        {
                            "name": "limitToFov",
                            "description": "- If set only targets within the given `FovROT` will be valid.",
                            "type": "FovROT",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "limitToNonDiagonalAdjacent",
                            "description": "- If true diagonally adjacent targets are not valid (only used if `range = 1`).",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "range",
                            "description": "- Max distance in tiles target can be from origin.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "validTypes",
                            "description": "- Array of valid target object types. Checked using `target instanceof type`.",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "includeTiles",
                            "description": "- If true tile objects are can be valid targets.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "exclude",
                            "description": "- Object or Array of objects to exclude from results.",
                            "type": "Object|Array",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "prepareValidTargets",
                            "description": "- If true valid targets are wraped in an object with x, y, range, value properties.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "filter",
                            "description": "- Function to filter objects when checking if they are valid. `function(obj){ return true }` . Targets must still be a valid type.",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "ValidTargets": {
            "name": "ValidTargets",
            "shortname": "ValidTargets",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/valid-targets.js",
            "line": 4,
            "description": "Manages a list of valid targets and which is currently selected.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "targets",
                    "description": "An Array of valid target objects to select from (intended to be in the format `validTargetsFinder.getValidTargets()` returns).",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                },
                {
                    "name": "settings",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "typeSortPriority",
                            "description": "- Array of types in order of their sort priority.",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "this.typeSortPriority"
                        },
                        {
                            "name": "mapWidth",
                            "description": "- Width of `this.map`.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "game.map.width"
                        },
                        {
                            "name": "mapHeight",
                            "description": "- Height of `this.map`.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "game.map.height"
                        },
                        {
                            "name": "skipSort",
                            "description": "- If true initial sort is skipped.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/mixins/action-interface.js",
            "line": 13,
            "description": "Sets a performable action implementation on object.",
            "itemtype": "method",
            "name": "setPerformableAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action name.",
                    "type": "String"
                },
                {
                    "name": "implementation",
                    "description": "- Object to set as the action implementation.\n  or a string to lookup an implementation `RL.PerformableActions[implementation]`.",
                    "type": "PerformableAction"
                }
            ],
            "class": "PerformableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 36,
            "description": "Returns a list of valid targets to perform an action on.",
            "itemtype": "method",
            "name": "getTargetsForAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action to get targets for.",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of valid targets.",
                "type": "Array"
            },
            "class": "PerformableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 61,
            "description": "Checks if source can perform an action with given settings. (source is `this`)\nFunctionality separated to avoid checking multiple targets when source cannot perform action regardless of target.",
            "itemtype": "method",
            "name": "canPerformAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action to check.",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the action can be performed.",
                "type": "Boolean"
            },
            "class": "PerformableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 87,
            "description": "Checks if source can perform an action on target with given settings.",
            "itemtype": "method",
            "name": "canPerformActionOnTarget",
            "params": [
                {
                    "name": "action",
                    "description": "- The action to check.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "- The target object to check against.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "skipCanPerformAction",
                            "description": "- If true skips checking that `this.canPerformAction(action, settings) == true`",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "`true` if the action can be performed on target.",
                "type": "Boolean"
            },
            "class": "PerformableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 120,
            "description": "Performs an action on target with given settings.",
            "itemtype": "method",
            "name": "performAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action to perform.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "- The target object to perform the action on.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "skipCanPerformAction",
                            "description": "- If true skips checking that `this.canPerformAction(action, settings) == true`",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "skipCanPerformActionOnTarget",
                            "description": "- If true skips checking that `this.skipCanPerformActionOnTarget(action, target, settings) == true`",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "`true` if the action has been successfully completed.",
                "type": "Boolean"
            },
            "class": "PerformableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 178,
            "description": "Sets a resolvable action implementation on object.",
            "itemtype": "method",
            "name": "setResolvableAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action name.",
                    "type": "String"
                },
                {
                    "name": "implementation",
                    "description": "- Object to set as the action implementation.",
                    "type": "ResolvableAction",
                    "optional": true
                }
            ],
            "class": "ResolvableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 199,
            "description": "Checks if a target can resolve an action with given source and settings. `this` is the target.",
            "itemtype": "method",
            "name": "canResolveAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action being performed on this target to resolve.",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "- The source object performing the action on this target.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if action was successfully resolved",
                "type": "Boolean"
            },
            "class": "ResolvableActionInterface"
        },
        {
            "file": "src/mixins/action-interface.js",
            "line": 224,
            "description": "Resolves an action on target from source with given settings.",
            "itemtype": "method",
            "name": "performAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action being performed on this target to resolve.",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "- The source object performing the action on this target.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "skipCanResolveAction",
                            "description": "- If true skips checking that `this.skipCanResolveAction(action, source, settings) == true`",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "`true` if the action was successfully resolved.",
                "type": "Boolean"
            },
            "class": "ResolvableActionInterface"
        },
        {
            "file": "src/action.js",
            "line": 19,
            "description": "Checks if the entity with this `PerformableAction` can currently perform the action.\nInstead of a function `this.canPerformAction` can be set to a boolean value if the check should always be true or false.\n\nIf this functions should always return `true` or `false` it can be set to a `Boolean` value that will be used\ninstead of the value returned by calling the function.",
            "itemtype": "method",
            "name": "canPerformAction",
            "params": [
                {
                    "name": "settings",
                    "description": "- The settings for the action.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "PerformableAction"
        },
        {
            "file": "src/action.js",
            "line": 32,
            "description": "Checks if the entity with this `PerformableAction` can currently perform the action on given target.\n\nIf this functions should always return `true` or `false` it can be set to a `Boolean` value that will be used\ninstead of the value returned by calling the function.",
            "itemtype": "method",
            "name": "canPerformActionOnTarget",
            "params": [
                {
                    "name": "target",
                    "description": "- The target to perform the action on.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- The settings for the action.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "PerformableAction"
        },
        {
            "file": "src/action.js",
            "line": 45,
            "description": "Performs this `PerformableAction` from source on target using settings.\n\nIf this functions should always return `true` or `false` it can be set to a `Boolean` value that will be used\ninstead of the value returned by calling the function.",
            "itemtype": "method",
            "name": "performAction",
            "params": [
                {
                    "name": "target",
                    "description": "- The target to perform the action on.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- The settings for the action.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "PerformableAction"
        },
        {
            "file": "src/action.js",
            "line": 58,
            "description": "Returns a list of valid targets to perform this action on.",
            "itemtype": "method",
            "name": "getTargetsForAction",
            "params": [
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of valid targets.",
                "type": "Array"
            },
            "class": "PerformableAction"
        },
        {
            "file": "src/action.js",
            "line": 66,
            "description": "Optional function called after action is resolved successfully.",
            "itemtype": "method",
            "name": "afterPerformActionSuccess",
            "params": [
                {
                    "name": "target",
                    "description": "- The target to perform the action on.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of valid targets.",
                "type": "Array"
            },
            "class": "PerformableAction"
        },
        {
            "file": "src/action.js",
            "line": 75,
            "description": "Optional function called after action is resolved un-successfully.",
            "itemtype": "method",
            "name": "afterPerformActionSuccess",
            "params": [
                {
                    "name": "target",
                    "description": "- The target to perform the action on.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of valid targets.",
                "type": "Array"
            },
            "class": "PerformableAction"
        },
        {
            "file": "src/action.js",
            "line": 100,
            "description": "Checks if the entity with this `ResolvableAction` can currently resolve the action given source and settings.\nInstead of a function `this.canPerformAction` can be set to a boolean value if the check should always be true or false.\n\nIf this functions should always return `true` or `false` it can be set to a `Boolean` value that will be used\ninstead of the value returned by calling the function.",
            "itemtype": "method",
            "name": "canResolveAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action being performed on this target to resolve.",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "- The source object performing the action on this target.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "ResolvableAction"
        },
        {
            "file": "src/action.js",
            "line": 115,
            "description": "Resolves an action on target from source with given settings.",
            "itemtype": "method",
            "name": "resolveAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action being performed on this target to resolve.",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "- The source object performing the action on this target.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings for the action.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the action was successfully resolved.",
                "type": "Boolean"
            },
            "class": "ResolvableAction"
        },
        {
            "file": "src/array-2d.js",
            "line": 21,
            "description": "Width of the 2d Array.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 28,
            "description": "Height of the 2d Array.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 35,
            "description": "2d Array data",
            "itemtype": "property",
            "name": "data",
            "type": "Array",
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 42,
            "description": "Resets the 2d array, clearing all data and initializing with `this.width` and `this.height`.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "width",
                    "description": "- The new width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The new height.",
                    "type": "Number"
                }
            ],
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 55,
            "description": "Updates the size of this Array2d without destroying data.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The new width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The new height.",
                    "type": "Number"
                }
            ],
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 75,
            "description": "Sets a value at given coords.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord of the value being set.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord of the value being set.",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "- The value being set at given coords.",
                    "type": "Mixed"
                }
            ],
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 89,
            "description": "Gets a value from given coords.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord of the value being retrieved.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord of the value being retrieved.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 103,
            "description": "Removes a value from given coords.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord of the value being removed.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord of the value being removed.",
                    "type": "Number"
                }
            ],
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 113,
            "description": "Retrieves an array of values of adjacent coords.",
            "itemtype": "method",
            "name": "getAdjacent",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord to get adjacent values of.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord to get adjacent values of.",
                    "type": "Number"
                },
                {
                    "name": "settings",
                    "description": "-",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "withCoords",
                            "description": "- If true the returned array will include the coords of each value ([{x: 0, y: 0, value: 1}, ...])",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "withDiagonals",
                            "description": "- If true diagonals will be included.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "filter",
                            "description": "- A function to filter the values returned (function(value, x, y){ return true;})",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An array of adjacent coord values.",
                "type": "Array"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 194,
            "description": "Retrieves an array of values of coords within a given radius.",
            "itemtype": "method",
            "name": "getWithinSquareRadius",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord at the center of the radius.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile x coord at the center of the radius.",
                    "type": "Number"
                },
                {
                    "name": "settings",
                    "description": "-",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "radius",
                            "description": "- Radius of the area to retrieve tiles from.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "filter",
                            "description": "- A function to filter the values returned (function(value, x, y){ return true;})",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "withCoords",
                            "description": "- If true the returned array will include the coords of each value ([{x: 0, y: 0, value: 1}, ...])",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "includeTarget",
                            "description": "- If true the value of the coordinates given will be included in the returned array.",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An array of coord values within a square radius of the given coords.",
                "type": "Array"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 258,
            "description": "Retrieves an array of values of coords along a line starting at point 0 and crossing point 1 until it hits the edge of the 2d array or a coord value returning true when passed to the condtion function.",
            "itemtype": "method",
            "name": "getLineThrough",
            "params": [
                {
                    "name": "x0",
                    "description": "- Map tile x coord of start.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "- Map tile y coord of start.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "- Map tile x coord of crossing.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "- Map tile y coord of crossing.",
                    "type": "Number"
                },
                {
                    "name": "condition",
                    "description": "- A function to determine when to end the line. A coord value returning true when passed to the function will end the line. (function(value, x, y){ return true;})",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "withCoords",
                    "description": "- If true the returned array will include the coords of each value ([{x: 0, y: 0, value: 1}, ...])",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "An array of coord values.",
                "type": "Array"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 313,
            "description": "Retrieves an array of the nearest coord values meeting checked requirements. If multiple coord values were matched at the same nearest distance, the returned array will contain multiple matched coord values.\nUsed for projecting path of ranged attacks, pushed entities, ect.",
            "itemtype": "method",
            "name": "getNearest",
            "params": [
                {
                    "name": "tileX",
                    "description": "- Map tile x coord of the center of the radius.",
                    "type": "Number"
                },
                {
                    "name": "tileY",
                    "description": "- Map tile x coord of the center of the radius.",
                    "type": "Number"
                },
                {
                    "name": "settings",
                    "description": "-",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxRadius",
                            "description": "- Maxium search radius from given coord.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "filter",
                            "description": "- A function to determine when the desired coord value is matched. A coord value returning true when passed to the function would be added to the list of results. (function(value, x, y){ return true;}) If no check function is provided any tile with a truthy value will be matched.",
                            "type": "Function",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "withCoords",
                            "description": "- If true the returned array will include the coords of each value ([{x: 0, y: 0, value: 1}, ...])",
                            "type": "Bool",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An array of coord values within a square radius of the given coords.",
                "type": "Array"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 408,
            "description": "Retrieves an array of the filtered values.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filter",
                    "description": "- A function to determine if a value is to be included in results (returns true). (function(value, x, y){ return true;})",
                    "type": "Function"
                },
                {
                    "name": "withCoords",
                    "description": "- If true the returned array will include the coords of each value ([{x: 0, y: 0, value: 1}, ...])",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "An array of coord values matched by the filter function.",
                "type": "Array"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 437,
            "description": "Creates a copy of this Array2d. Shallow copies values.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Array2d"
            },
            "class": "Array2d"
        },
        {
            "file": "src/array-2d.js",
            "line": 455,
            "description": "Loops over each coord value.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "func",
                    "description": "- A function to call on each coord value. (function(value, x, y){})",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "- Context to call the function with (func.call(context, val, x, y))",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array2d"
            },
            "class": "Array2d"
        },
        {
            "file": "src/console.js",
            "line": 24,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Console"
        },
        {
            "file": "src/console.js",
            "line": 31,
            "description": "Element containing console messages.\nMust be manually added to the DOM",
            "itemtype": "property",
            "name": "el",
            "type": "HTMLElement",
            "class": "Console"
        },
        {
            "file": "src/console.js",
            "line": 39,
            "description": "Number of messages to display at once.",
            "itemtype": "property",
            "name": "messageHistoryCount",
            "type": "Number",
            "class": "Console"
        },
        {
            "file": "src/console.js",
            "line": 46,
            "description": "Adds a message to the console.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "-",
                    "description": "Message to be added.",
                    "type": "String"
                }
            ],
            "class": "Console"
        },
        {
            "file": "src/entity.js",
            "line": 32,
            "description": "Game instance this object is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 39,
            "description": "Unique id for this entity.",
            "type": "{Number}",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 45,
            "description": "The type of entity this is.\nWhen created this object is merged with the value of Entity.Types[type].",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 53,
            "description": "Called when the entity is first created. Intended to be assigned by Entity.Types.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "type",
                    "description": "- Type of entity. When created this object is merged with the value of Entity.Types[type].",
                    "type": "String"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 61,
            "description": "Name used when referencing or describing this entity.\nUsed in console messages.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 69,
            "description": "The x map tile coord of this entity.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 76,
            "description": "The y map tile coord of this entity.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 83,
            "description": "The character displayed when rendering this entity.",
            "itemtype": "property",
            "name": "char",
            "type": "String",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 90,
            "description": "The color of the character displayed when rendering this entity. Not rendered if false.",
            "itemtype": "property",
            "name": "color",
            "type": "String|bool",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 97,
            "description": "The background color the character displayed when rendering this entity. Not rendered if false.",
            "itemtype": "property",
            "name": "bgColor",
            "type": "String|bool",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 104,
            "description": "Determines if this entity has been killed and needs to be removed.",
            "itemtype": "property",
            "name": "dead",
            "type": "bool",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 111,
            "description": "Optional callback called when added to an `ObjectManager` or `MultiObjectManager`.",
            "metod": "onAdd",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 117,
            "description": "Optional callback called when removed from an `ObjectManager` or `MultiObjectManager`.",
            "metod": "onRemve",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 123,
            "description": "Called after a player action has been resolved. Resolves this entities turn.",
            "itemtype": "method",
            "name": "update",
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 131,
            "description": "Checks if an entity can move through a map tile.\nConvenience method for this.game.canMoveThrough()",
            "itemtype": "method",
            "name": "canMoveThrough",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord to check if this entity can move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord to check if this entity can move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 143,
            "description": "Checks if an entity can move through and into a map tile and that tile is un-occupied.\nConvenience method for this.game.entityCanMoveTo()",
            "itemtype": "method",
            "name": "canMoveTo",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord to check if this entity can move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord to check if this entity can move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 155,
            "description": "Changes the position of this entity on the map.\nConvenience method for this.game.entityMoveTo()\nthis.canMoveTo() and/or this.canMoveThrough() should always be checked before calling this.moveTo()",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord to move to.",
                    "type": "Number"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 167,
            "description": "Checks if a map tile can be seen through.\nConvenience method for this.game.entityCanSeeThrough()",
            "itemtype": "method",
            "name": "canSeeThrough",
            "params": [
                {
                    "name": "x",
                    "description": "- The x map tile coord to check.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map tile coord to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Entity"
        },
        {
            "file": "src/entity.js",
            "line": 179,
            "description": "Handles the behavior of a player or other entity attempting to move into the tile coord this entity is currently occupying.",
            "itemtype": "method",
            "name": "bump",
            "params": [
                {
                    "name": "entity",
                    "description": "- The player or entity attempting to move into this entity's tile.",
                    "type": "Player|Entity"
                }
            ],
            "return": {
                "description": "true if bumping this entity completes the action of the bumping entity.",
                "type": "Bool"
            },
            "class": "Entity"
        },
        {
            "file": "src/fov-rot.js",
            "line": 20,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 27,
            "description": "Array2d storing fovROT visibility fovMap",
            "itemtype": "property",
            "name": "fovMap",
            "type": "Array2d",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 34,
            "description": "Field Range of view 90, 180, or 360.",
            "itemtype": "property",
            "name": "fieldRange",
            "type": "Number",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 41,
            "description": "Direction of fov (used as default) (not used for fieldRange 360) valid directions: ['up', 'down', 'left', 'right', 'up_left', 'up_right', 'down_left', 'down_right'].",
            "itemtype": "property",
            "name": "direction",
            "type": "String",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 48,
            "description": "Max visible distance in tiles",
            "itemtype": "property",
            "name": "maxViewDistance",
            "type": "Number",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 55,
            "description": "All visible map tiles\nArray of objects: {x: null, y: null, tile: null, range: null}",
            "itemtype": "property",
            "name": "visibleTiles",
            "type": "{Array}",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 63,
            "description": "Array of visible tile keys used to prevent duplicates in this.visibleTiles.",
            "itemtype": "property",
            "name": "visibleTileKeys",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 71,
            "description": "Validates a fieldRange value.",
            "itemtype": "method",
            "name": "validateFieldRange",
            "params": [
                {
                    "name": "fieldRange",
                    "description": "- Field Range of view valid values: `90`, `180`, or `360`.",
                    "type": "Number"
                }
            ],
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 83,
            "description": "Converts a string direction to an rot direction",
            "itemtype": "method",
            "name": "directionStringToArray",
            "params": [
                {
                    "name": "direction",
                    "description": "- Direction of fov (used as default) (not used for fieldRange 360) valid directions: ['up', 'down', 'left', 'right', 'up_left', 'up_right', 'down_left', 'down_right'].",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[x, y]",
                "type": "Array"
            },
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 94,
            "description": "Calculates the fovROT data relative to given coords.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "x",
                    "description": "- The map coordinate position to calculate FovROT from on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map coordinate position to calculate FovROT from on the y axis.",
                    "type": "Number"
                },
                {
                    "name": "[fieldRange",
                    "description": "= this.fieldRange || 360] - Field Range of view 90, 180, or 360.",
                    "type": "Number"
                },
                {
                    "name": "[direction",
                    "description": "= this.direction || 'up'] - Direction of fov (not used for fieldRange 360) valid directions: ['up', 'down', 'left', 'right', 'up_left', 'up_right', 'down_left', 'down_right'];.",
                    "type": "String|ROT.DIRS[8].x"
                },
                {
                    "name": "[maxViewDistance",
                    "description": "= this.maxViewDistance] - Max visible distance in tiles.",
                    "type": "Number"
                },
                {
                    "name": "entity",
                    "description": "- The entity to check tile visibility with.",
                    "type": "Entity",
                    "optional": true
                }
            ],
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 145,
            "description": "Retrieves the visibility of the tile at given coords",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "- The map coord position to get FovROT visibility from.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map coord position to get FovROT visibility from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 156,
            "description": "Checks if a tile blocks line of sight",
            "itemtype": "method",
            "name": "entityCanSeeThrough",
            "params": [
                {
                    "name": "entity",
                    "description": "- The entity to make a callback for.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 169,
            "description": "Sets the visibility of a checked map tile",
            "itemtype": "method",
            "name": "setMapTileVisible",
            "params": [
                {
                    "name": "x",
                    "description": "- The map coord position to set.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map coord position to set.",
                    "type": "Number"
                },
                {
                    "name": "range",
                    "description": "- The distance from this fov origin.",
                    "type": "Number"
                },
                {
                    "name": "visibility",
                    "description": "- The visibility of this tile coord.",
                    "type": "Number"
                }
            ],
            "class": "FovROT"
        },
        {
            "file": "src/fov-rot.js",
            "line": 197,
            "description": "Sets the size of the map to mange fovROT within.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- Width of current map in tiles.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height of current map in tiles.",
                    "type": "Number"
                }
            ],
            "class": "FovROT"
        },
        {
            "file": "src/game.js",
            "line": 38,
            "description": "The current map.",
            "itemtype": "property",
            "name": "map",
            "type": "Array2d",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 45,
            "description": "The current entityManager.",
            "itemtype": "property",
            "name": "entityManager",
            "type": "EntityManager",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 52,
            "description": "The current Lighting.",
            "itemtype": "property",
            "name": "lighting",
            "type": "Lighting",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 59,
            "description": "The current renderer.",
            "itemtype": "property",
            "name": "renderer",
            "type": "Renderer",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 66,
            "description": "The current console.",
            "itemtype": "property",
            "name": "console",
            "type": "Console",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 73,
            "description": "The current player.",
            "itemtype": "property",
            "name": "player",
            "type": "Player",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 80,
            "description": "The current input.",
            "itemtype": "property",
            "name": "input",
            "type": "Input",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 87,
            "description": "The current mouse.",
            "itemtype": "property",
            "name": "mouse",
            "type": "Mouse",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 94,
            "description": "If true input actions are ignored.",
            "itemtype": "property",
            "name": "gameOver",
            "type": "{Bool}",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 101,
            "description": "If true the map will be drawn even if `this.player.update(action)` returns false.\n`this.queueDraw` is set to false after every update.",
            "itemtype": "property",
            "name": "queueDraw",
            "type": "{Boolean}",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 109,
            "description": "Sets the size of the map resizing this.map and this.entityManager.",
            "itemtype": "method",
            "name": "setMapSize",
            "params": [
                {
                    "name": "width",
                    "description": "- Width in tilse to set map and entityManager to.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height in tilse to set map and entityManager to.",
                    "type": "Number"
                }
            ],
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 122,
            "description": "Starts the game.",
            "itemtype": "method",
            "name": "start",
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 135,
            "description": "Handles user input actions.",
            "itemtype": "method",
            "name": "onKeyAction",
            "params": [
                {
                    "name": "action",
                    "description": "- Action triggered by user input.",
                    "type": "String"
                }
            ],
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 159,
            "description": "Handles tile mouse click events.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "x",
                    "description": "- Mouse x coord relative to window.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Mouse y coord relative to window.",
                    "type": "Number"
                }
            ],
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 180,
            "description": "Handles tile mouse hover events",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "x",
                    "description": "- Mouse x coord relative to window.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Mouse y coord relative to window.",
                    "type": "Number"
                }
            ],
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 199,
            "description": "Gets all objects at tile position",
            "itemtype": "method",
            "name": "getObjectsAtPostion",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 219,
            "description": "Checks if an entity can move through a map tile.\nThis does NOT check for entities on the tile blocking movement.\nThis is where code for special cases changing an entity's ability to pass through a tile should be placed.\nThings like flying, swimming and ghosts moving through walls.",
            "itemtype": "method",
            "name": "entityCanMoveThrough",
            "params": [
                {
                    "name": "entity",
                    "description": "- The entity to check.",
                    "type": "Entity"
                },
                {
                    "name": "x",
                    "description": "- The x map tile coord to check.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map tile coord to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 239,
            "description": "Checks if an entity can move through and into a map tile and that tile is un-occupied.",
            "itemtype": "method",
            "name": "entityCanMoveTo",
            "params": [
                {
                    "name": "entity",
                    "description": "- The entity to check.",
                    "type": "Entity"
                },
                {
                    "name": "x",
                    "description": "- The x map tile coord to check.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map tile coord to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 258,
            "description": "Changes the position of an entity on the map.\nUpdates entity position in this.entityManager and calls tile.onEntityEnter.\n`this.entityCanMoveTo()` should always be checked first.",
            "itemtype": "method",
            "name": "entityMoveTo",
            "params": [
                {
                    "name": "entity",
                    "description": "- The entity to move.",
                    "type": "Entity"
                },
                {
                    "name": "x",
                    "description": "- The tile map x coord to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord to move to.",
                    "type": "Number"
                }
            ],
            "class": "Game"
        },
        {
            "file": "src/game.js",
            "line": 275,
            "description": "Checks if a map tile can be seen through.\nThis is where code for special cases like smoke, fog, x-ray vision can be implemented by checking the entity param.",
            "itemtype": "method",
            "name": "entityCanSeeThrough",
            "params": [
                {
                    "name": "x",
                    "description": "- The x map tile coord to check.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map tile coord to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Game"
        },
        {
            "file": "src/input.js",
            "line": 36,
            "description": "An object of key val pairs mapping keyCode to action",
            "itemtype": "property",
            "name": "bindings",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 43,
            "description": "Function called when a key bound to an action is pressed (function(action){}).",
            "itemtype": "property",
            "name": "onKeyAction",
            "type": "Function",
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 50,
            "description": "Bind a user action to a key input",
            "itemtype": "method",
            "name": "bindAction",
            "params": [
                {
                    "name": "action",
                    "description": "- The action to bind the key to.",
                    "type": "String"
                },
                {
                    "name": "keyName",
                    "description": "- The keyname to bind the action to. @see Input.Keys",
                    "type": "String"
                }
            ],
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 61,
            "description": "Converts a user input key code to an action bound to that key or false if none is bound.",
            "itemtype": "method",
            "name": "getActionFromKeyCode",
            "params": [
                {
                    "name": "keyCode",
                    "description": "- The key code to retrieve an action bound to.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String|bool The action bound to the keyCode or false."
            },
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 75,
            "description": "Loads multiple action key bindings",
            "itemtype": "method",
            "name": "addBindings",
            "params": [
                {
                    "name": "bindings",
                    "description": "- An object of key val pairs mapping an action to an array of keys that trigger it. Input.Keys is used to convert input key string names to key codes.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "action1",
                            "description": "Input keys mapped to action1. ['A', 'B', ...]",
                            "type": "Array"
                        },
                        {
                            "name": "action2",
                            "description": "Input keys mapped to action2. ['X', 'Y', ...]",
                            "type": "Array"
                        },
                        {
                            "name": "...",
                            "description": ""
                        }
                    ]
                }
            ],
            "example": [
                "\n           //bindings param example:\n           {\n               up: ['UP_ARROW'],\n               down: ['DOWN_ARROW'],\n               left: ['LEFT_ARROW'],\n               right: ['RIGHT_ARROW'],\n           }"
            ],
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 101,
            "description": "Event handler for document.addEventListener('keydown', this). Triggered when a key is pressed.\nIf an action is bound to the key pressed, false is returned to cancel the default browser behavior of the keypress.\nIf an action is not bound to the key pressed, true is returned allowing the default browser behavior of the keypress to function.",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "- The onkeydown event.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "bool"
            },
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 128,
            "description": "Binds event listener for document keydown event.",
            "itemtype": "method",
            "name": "startListening",
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 136,
            "description": "Unbinds document keydown event listener",
            "itemtype": "method",
            "name": "stopListening",
            "class": "Input"
        },
        {
            "file": "src/input.js",
            "line": 145,
            "static": 1,
            "itemtype": "property",
            "name": "Keys",
            "type": "{Object}",
            "class": "Input"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 42,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "{Game}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 49,
            "description": "Array2d storing Lighting data.",
            "itemtype": "property",
            "name": "lightingMap",
            "type": "{Array2d}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 56,
            "description": "Reflectivity of wall tiles.",
            "itemtype": "property",
            "name": "defaultWallReflectivity",
            "type": "{Number}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 63,
            "description": "Reflectivity of floor tiles.",
            "itemtype": "property",
            "name": "defaultFloorReflectivity",
            "type": "{Number}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 70,
            "description": "Ambient light",
            "itemtype": "property",
            "name": "ambientLight",
            "type": "{Array}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 77,
            "description": "ROT.FOV instance",
            "itemtype": "property",
            "name": "_fov",
            "access": "private",
            "tagname": "",
            "type": "{ROT.FOV}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 85,
            "description": "ROT.Lighting instance",
            "itemtype": "property",
            "name": "_lighting",
            "access": "private",
            "tagname": "",
            "type": "{ROT.Lighting}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 93,
            "description": "If lighting data has changed and needs to be recalculated.",
            "itemtype": "property",
            "name": "_dirty",
            "access": "private",
            "tagname": "",
            "type": "{Bool}",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 101,
            "description": "Calculates the Lighting data relative to given coords;",
            "itemtype": "method",
            "name": "update",
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 113,
            "description": "Shades tileData using lighting.",
            "itemtype": "method",
            "name": "shadeTile",
            "params": [
                {
                    "name": "x",
                    "description": "- The x map coordinate to shade.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map coordinate to shade.",
                    "type": "Number"
                },
                {
                    "name": "tileData",
                    "description": "- The `TileData` object to shade.",
                    "type": "TileData"
                }
            ],
            "return": {
                "description": "",
                "type": "TileData"
            },
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 157,
            "description": "Retrieves the visibility of the tile at given coords",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "- The map coordinate position to get Lighting visibility from on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map coordinate position to get Lighting visibility from on the y axis.",
                    "type": "Number"
                }
            ],
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 167,
            "description": "Set a light position and color",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "- The map coordinate position to set lightin on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map coordinate position to set lightin on the y axis.",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "- Red.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "- Green.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "- Blue.",
                    "type": "Number"
                }
            ],
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 181,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord.",
                    "type": "Number"
                }
            ],
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 191,
            "description": "Returns the reflectivity value of a tile",
            "itemtype": "method",
            "name": "getTileReflectivity",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord.",
                    "type": "Number"
                }
            ],
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 215,
            "description": "Checks if a tile blocks line of sight",
            "itemtype": "method",
            "name": "checkVisible",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord.",
                    "type": "Number"
                }
            ],
            "class": "LightingROT"
        },
        {
            "file": "src/lighting-rot.js",
            "line": 226,
            "description": "Sets the size of the map to mange Lighting within.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- Width of current map in tiles.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height of current map in tiles.",
                    "type": "Number"
                }
            ],
            "class": "LightingROT"
        },
        {
            "file": "src/map.js",
            "line": 18,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Map"
        },
        {
            "file": "src/map.js",
            "line": 25,
            "description": "Sets a value at given coords.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "- Position on the x axis of the value being set.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Position on the y axis of the value being set.",
                    "type": "Number"
                },
                {
                    "name": "tile",
                    "description": "- The Tile being set at given coords. If Tile is a string a new tile will be created using the string as the Tile Type (see Tile.Types[type]).",
                    "type": "Tile|String"
                }
            ],
            "return": {
                "description": "the tile added",
                "type": "Tile"
            },
            "class": "Map"
        },
        {
            "file": "src/map.js",
            "line": 44,
            "description": "Checks if a map tile can be seen through.",
            "itemtype": "method",
            "name": "canSeeThroughTile",
            "params": [
                {
                    "name": "x",
                    "description": "- The x map tile coord to check.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map tile coord to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Map"
        },
        {
            "file": "src/map.js",
            "line": 56,
            "description": "Checks if a map tile can be moved through.",
            "itemtype": "method",
            "name": "canMoveThroughTile",
            "params": [
                {
                    "name": "x",
                    "description": "- The x map tile coord to check.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The y map tile coord to check.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Map"
        },
        {
            "file": "src/map.js",
            "line": 68,
            "description": "Loads Tile data from an array of strings",
            "itemtype": "method",
            "name": "loadTilesFromArrayString",
            "params": [
                {
                    "name": "mapData",
                    "description": "- The array of strings to load.",
                    "type": "Array"
                },
                {
                    "name": "charToType",
                    "description": "- An object mapping string characters to Tile types (see Tile.Types[type]).",
                    "type": "Object"
                },
                {
                    "name": "defaultTileType",
                    "description": "- The tile type to use if a character is not in charToType. This is used to allow characters representing entites or non-tile objects to be included in the mapData.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           // 'P' will be ignored and a floor tile will be placed at that position\n           var mapData = [\n               '####',\n               '#..#',\n               '#.P#',\n               '####',\n           ],\n\n           charToType = {\n               '#': 'wall',\n               '.': 'floor'\n           },\n           defaultTileType = 'floor';\n\n           map.loadTilesFromArrayString(mapData, charToType, defaultTileType);\n"
            ],
            "class": "Map"
        },
        {
            "file": "src/mixins.js",
            "line": 22,
            "description": "Returns as `tileData`object used by `Renderer` objects to draw tiles.",
            "itemtype": "method",
            "name": "getTileDrawData",
            "return": {
                "description": "",
                "type": "TileDrawData"
            },
            "class": "TileDraw"
        },
        {
            "file": "src/mouse.js",
            "line": 19,
            "description": "A function to handle tile mouse click events.",
            "itemtype": "method",
            "name": "onClick",
            "params": [
                {
                    "name": "x",
                    "description": "- Mouse x coord relative to window.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Mouse y coord relative to window.",
                    "type": "Number"
                }
            ],
            "class": "Mouse"
        },
        {
            "file": "src/mouse.js",
            "line": 27,
            "description": "A function to handle tile mouse hover events",
            "itemtype": "method",
            "name": "onHover",
            "params": [
                {
                    "name": "x",
                    "description": "- Mouse x coord relative to window.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Mouse y coord relative to window.",
                    "type": "Number"
                }
            ],
            "class": "Mouse"
        },
        {
            "file": "src/mouse.js",
            "line": 35,
            "description": "The dom element being rendered to and listened to for mouse events.",
            "itemtype": "property",
            "name": "_boundElement",
            "access": "protected",
            "tagname": "",
            "type": "{HTMLElement}",
            "class": "Mouse"
        },
        {
            "file": "src/mouse.js",
            "line": 43,
            "description": "Hander for mouse events",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "e",
                    "description": "- mouse event",
                    "type": "Event"
                }
            ],
            "class": "Mouse"
        },
        {
            "file": "src/mouse.js",
            "line": 63,
            "description": "Hander for mouse move events",
            "itemtype": "method",
            "name": "mouseMove",
            "params": [
                {
                    "name": "e",
                    "description": "- mouse event",
                    "type": "Event"
                }
            ],
            "class": "Mouse"
        },
        {
            "file": "src/mouse.js",
            "line": 75,
            "description": "Binds event listener for mouse events.",
            "itemtype": "method",
            "name": "startListening",
            "params": [
                {
                    "name": "element",
                    "description": "- The dom element being rendered to.",
                    "type": "HTMLElement"
                }
            ],
            "class": "Mouse"
        },
        {
            "file": "src/mouse.js",
            "line": 93,
            "description": "Unbinds event listener for mouse events.",
            "itemtype": "method",
            "name": "stopListening",
            "class": "Mouse"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 31,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 38,
            "description": "Array containing all objects.",
            "itemtype": "property",
            "name": "objects",
            "type": "Array",
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 45,
            "description": "Array2d containing all objects by their current map tile coord",
            "itemtype": "property",
            "name": "map",
            "type": "Array2d",
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 52,
            "description": "Retrieves all objects at given map tile coord.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord.",
                    "type": "Number"
                },
                {
                    "name": "filter",
                    "description": "- A function to filter the array of objects returned `function(object){  return true }`.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 70,
            "description": "Retrieves the first object in array at given map tile coord.",
            "itemtype": "method",
            "name": "getFirst",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord.",
                    "type": "Number"
                },
                {
                    "name": "filter",
                    "description": "- A function to filter the object returned at this map tile coord `function(object){  return true }`. The first object in the array the filter matches is returned.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 95,
            "description": "Retrieves the last object in array at given map tile coord.",
            "itemtype": "method",
            "name": "getLast",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord.",
                    "type": "Number"
                },
                {
                    "name": "filter",
                    "description": "- A function to filter the object returned at this map tile coord `function(object){  return true }`. The last object in the array the filter matches is returned.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 119,
            "description": "Adds an object to the manager at given map tile coord. Multiple objects can be added to the same coord.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile coord x.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile coord y.",
                    "type": "Number"
                },
                {
                    "name": "obj",
                    "description": "- The Object being set at given coords. If `obj` is a string a new Object will be created using `this.makeNewObjectFromType(obj)`.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "The added object.",
                "type": "Object"
            },
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 143,
            "description": "Removes an entity from the manager.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "- The objity to be removed.",
                    "type": "Obj"
                }
            ],
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 159,
            "description": "Remove all objects from given location.",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "x",
                    "description": "- Tile map x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Tile map y coord.",
                    "type": "Number"
                },
                {
                    "name": "filter",
                    "description": "- A function to filter the objects removed `function(object){  return true }`.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 173,
            "description": "Changes the position of an entity already added to this entityManager.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "- The new map tile coordinate position of the entity on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The new map tile coordinate position of the entity on the y axis.",
                    "type": "Number"
                },
                {
                    "name": "object",
                    "description": "- The objectity to be removed.",
                    "type": "Obj"
                }
            ],
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 187,
            "description": "Resets this entityManager.",
            "itemtype": "method",
            "name": "reset",
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 200,
            "description": "Sets the size of the map to manage objects within.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- Width of current map in tiles.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height of current map in tiles.",
                    "type": "Number"
                }
            ],
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 216,
            "description": "Same as `this.map.getAdjacent`, but merges all results into on flat array.",
            "itemtype": "method",
            "name": "getAdjacent",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord;",
                    "type": "Number"
                },
                {
                    "name": "settings",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 238,
            "description": "Loads Obj data from an array of strings.",
            "itemtype": "method",
            "name": "loadEntitiesFromArrayString",
            "params": [
                {
                    "name": "mapData",
                    "description": "- The array of strings to load.",
                    "type": "Array"
                },
                {
                    "name": "charToType",
                    "description": "- An object mapping string characters to Obj types (see Obj.Types[type]). Characters in mapData not in charToType are ignored.",
                    "type": "Object"
                },
                {
                    "name": "defaultType",
                    "description": "- If set, all characters in `mapData` not found in `charToType` will be replaced by an object with `defaultType`.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n\n           var mapData = [\n               '####',\n               '#..#',\n               '#.Z#',\n               '####',\n           ],\n           charToType = {\n               'Z': 'zombie'\n           };\n\n           entityManager.loadTilesFromArrayString(mapData, charToType);\n"
            ],
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 282,
            "description": "Creates a new object instance.",
            "itemtype": "method",
            "name": "makeNewObjectFromType",
            "params": [
                {
                    "name": "type",
                    "description": "- The type to make the object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "MultiObjectManager"
        },
        {
            "file": "src/multi-object-manager.js",
            "line": 292,
            "description": "Calls the `object.update()` method on all objects. Removes `object.dead == true` objects.\nTypically called after a player has resolved their actions.\nNot all object managers need to upade the objects they manage.",
            "params": [
                {
                    "name": "excludeObject",
                    "description": "- excludeObject will be skipped if found in `this.objects`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "update",
            "class": "MultiObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 24,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "{Game}",
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 31,
            "description": "Array containing all objects.",
            "itemtype": "property",
            "name": "objects",
            "type": "{Array}",
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 38,
            "description": "Array2d containing all objects by their current map tile coord",
            "itemtype": "property",
            "name": "map",
            "type": "{Array2d}",
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 45,
            "description": "Retrieves an entity by map tile coords.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map coord x.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map coord y.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|false"
            },
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 56,
            "description": "Adds an object to the manager at given map tile coord.\nIf an object is already at this map tile coord it is removed from the manager completely.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map coord x.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map coord y.",
                    "type": "Number"
                },
                {
                    "name": "obj",
                    "description": "- The Object being set at given coords. If obj is a string a new Object will be created using `this.makeNewObjectFromType(obj)`.",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "The added object.",
                "type": "Object"
            },
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 84,
            "description": "Removes an object from the manager.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "object",
                    "description": "- The objectity to be removed.",
                    "type": "Object"
                }
            ],
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 98,
            "description": "Changes the position of an object already added to this objectManager.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "- The destination tile map coord x.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The destination tile map coord y.",
                    "type": "Number"
                },
                {
                    "name": "object",
                    "description": "- The objectity to be removed.",
                    "type": "Obj"
                }
            ],
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 120,
            "description": "Resets this entityManager.",
            "itemtype": "method",
            "name": "reset",
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 129,
            "description": "Sets the size of the map to manage objects within.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- Width of current map in tiles.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- Height of current map in tiles.",
                    "type": "Number"
                }
            ],
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 139,
            "description": "Loads object data from an array of strings.",
            "itemtype": "method",
            "name": "loadEntitiesFromArrayString",
            "params": [
                {
                    "name": "mapData",
                    "description": "- The array of strings to load.",
                    "type": "Array"
                },
                {
                    "name": "charToType",
                    "description": "- An object mapping string characters to Object types see `this.makeNewObjectFromType()`. Characters in mapData not in charToType are ignored.",
                    "type": "Object"
                },
                {
                    "name": "defaultType",
                    "description": "- If set, all characters in `mapData` not found in `charToType` will be replaced by an object with `defaultType`.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "replaceCurrentObjects",
                    "description": "- If true current objects at positons of objects being added will be removed. Otherwise new objects at occupied positions will not be added.",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\n           // 'P' will be ignored and a floor tile will be placed at that position\n           var mapData = [\n               '####',\n               '#..#',\n               '#.Z#',\n               '####',\n           ],\n           charToType = {\n               'Z': 'zombie'\n           };\n\n           entityManager.loadTilesFromArrayString(mapData, charToType);\n"
            ],
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 193,
            "description": "Creates a new object instance of given type.",
            "itemtype": "method",
            "name": "makeNewObjectFromType",
            "params": [
                {
                    "name": "type",
                    "description": "- The type to make the object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ObjectManager"
        },
        {
            "file": "src/object-manager.js",
            "line": 203,
            "description": "Calls the `object.update()` method on all objects. Removes `object.dead == true` objects.\nTypically called after a player has resolved their actions.\nNot all object managers need to upade the objects they manage.",
            "params": [
                {
                    "name": "excludeObject",
                    "description": "- excludeObject will be skipped if found in `this.objects`. Typically used to skip the player object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "update",
            "class": "ObjectManager"
        },
        {
            "file": "src/player.js",
            "line": 36,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 43,
            "description": "FovRot instance representing this entity's vision.",
            "itemtype": "property",
            "name": "fov",
            "type": "FovROT",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 50,
            "description": "Name used when referencing describing this player.\nUsed in console messages.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 58,
            "description": "Optional Callback. Called when the entity is first created. Intended to be assigned by Entity.Types.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                }
            ],
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 65,
            "description": "The map tile coordinate position of the player on the x axis.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 72,
            "description": "The map tile coordinate position of the player on the y axis.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 79,
            "description": "The character displayed when rendering this player.",
            "itemtype": "property",
            "name": "char",
            "type": "String",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 86,
            "description": "The color of the character displayed when rendering this player.",
            "itemtype": "property",
            "name": "color",
            "type": "String|bool",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 93,
            "description": "The background color the character displayed when rendering this player.",
            "itemtype": "property",
            "name": "bgColor",
            "type": "String|bool",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 100,
            "description": "Field Range of this.fov (90, 180, or 360)",
            "itemtype": "property",
            "name": "fovFieldRange",
            "type": "Number",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 107,
            "description": "Direction of fov (not used for fieldRange 360) valid directions: ['up', 'down', 'left', 'right', 'up_left', 'up_right', 'down_left', 'down_right'].",
            "itemtype": "property",
            "name": "fovDirection",
            "type": "String",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 114,
            "description": "Max visible distance in tiles",
            "itemtype": "property",
            "name": "fovMaxViewDistance",
            "type": "Number",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 121,
            "description": "Determines if the player has been killed.",
            "itemtype": "property",
            "name": "dead",
            "type": "bool",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 128,
            "description": "Optional callback called when added to an `ObjectManager` or `MultiObjectManager`.",
            "metod": "onAdd",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 134,
            "description": "Optional callback called when removed from an `ObjectManager` or `MultiObjectManager`.",
            "metod": "onRemve",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 140,
            "description": "Updates this.fov",
            "itemtype": "method",
            "name": "updateFov",
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 153,
            "description": "Checks if this entity can move to the specified map tile",
            "itemtype": "method",
            "name": "canMoveTo",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord to check if this entity can move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord to check if this entity can move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Bool"
            },
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 164,
            "description": "Changes the position of this entity on the map.\nthis.canMoveTo() should always be checked before calling this.moveTo",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "- The tile map x coord to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The tile map y coord to move to.",
                    "type": "Number"
                }
            ],
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 175,
            "description": "Called when user key is pressed with action of key pressed as an arg.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "action",
                    "description": "- action bound to key pressed by user",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if action was taken.",
                "type": "Bool"
            },
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 198,
            "description": "Move action.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile cood to move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile cood to move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if action was taken.",
                "type": "Bool"
            },
            "class": "Player"
        },
        {
            "file": "src/player.js",
            "line": 225,
            "description": "Wait action.",
            "itemtype": "method",
            "name": "wait",
            "class": "Player"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 27,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 34,
            "description": "The type of `RendererLayer` this is.\nWhen created this object is merged with the value of `RendererLayer.Types[type]`. See constructor.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 42,
            "description": "If true, `this.getTileData()` will merge the `tileData` it would otherwise return with the `prevTileData` param (if provided).\nobjects are  from this layer should be merged with layers below before drawing.",
            "itemtype": "property",
            "name": "mergeWithPrevLayer",
            "type": "{Boolean}",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 50,
            "description": "If true, when `this.getTileData(x, y)` returns a value that evaluates to false, all tile layers above this one are not drawn by the `Renderer` for this map tile coord.",
            "itemtype": "property",
            "name": "cancelTileDrawWhenNotFound",
            "type": "{Boolean}",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 57,
            "description": "If true, `tileData` is drawn to the canvas after processing this layer.",
            "itemtype": "property",
            "name": "draw",
            "type": "{Boolean}",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 64,
            "description": "Before draw function. Ignored if `this.draw = false`.",
            "itemtype": "property",
            "name": "beforeDraw",
            "type": "{Function} `function(x, y, tileData, ctx){}`",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 71,
            "description": "After draw function. Ignored if `this.draw = false`.",
            "itemtype": "property",
            "name": "afterDraw",
            "type": "{Function} `function(x, y, tileData, ctx){}`",
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 78,
            "description": "Get layer's `tileData` for a given map tile coord.",
            "itemtype": "method",
            "name": "getTileData",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord.",
                    "type": "Object"
                },
                {
                    "name": "prevTileData",
                    "description": "- `tileData` object for the given map tile coord from previous layer.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "false if nothing to render",
                "type": "TileData|Bool"
            },
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 90,
            "description": "Get layer's `TileData` for a given map tile coord.\nOptionally modifying the `prevTileData` object param if `this.mergeWithPrevLayer = true`.",
            "itemtype": "method",
            "name": "getModifiedTileData",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile y coord.",
                    "type": "Object"
                },
                {
                    "name": "prevTileData",
                    "description": "- `tileData` object for the given map tile coord from previous layer.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "false if nothing to render",
                "type": "TileData|Bool"
            },
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer-layer.js",
            "line": 107,
            "description": "Merges 2 `tileData` objects.\nUsed to Merges layers of the same tile before drawing them.",
            "itemtype": "method",
            "name": "mergeTileData",
            "params": [
                {
                    "name": "tileData1",
                    "description": "- `tileData` to merge to.",
                    "type": "TileData"
                },
                {
                    "name": "tileData2",
                    "description": "- `tileData` to merge from, properties with values on tileData2 replace matching properties on tileData1",
                    "type": "TileData"
                }
            ],
            "return": {
                "description": "A new `tileData` object with merged values.",
                "type": "TileData"
            },
            "class": "RendererLayer"
        },
        {
            "file": "src/renderer.js",
            "line": 30,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 37,
            "description": "Tile data layers to draw",
            "type": "{Array}",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 43,
            "description": "Canvas element this renderer draws to.",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 50,
            "description": "Drawing context of this.canvas",
            "itemtype": "property",
            "name": "ctx",
            "type": "CanvasRenderingContext2D",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 57,
            "description": "Canvas element this renderer draws to as a buffer for this.canvas.",
            "itemtype": "property",
            "name": "buffer",
            "type": "HTMLCanvasElement",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 64,
            "description": "Drawing context of this.buffer",
            "itemtype": "property",
            "name": "bufferCtx",
            "type": "CanvasRenderingContext2D",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 71,
            "description": "Background color of map view.",
            "itemtype": "property",
            "name": "bgColor",
            "type": "String",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 78,
            "description": "Color overlayed when mouse is over a tile.",
            "itemtype": "property",
            "name": "hoverColor",
            "type": "String",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 85,
            "description": "Alpha value applied to non-visible tiles",
            "itemtype": "property",
            "name": "nonVisibleTileAlpha",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 92,
            "description": "Size of each tile is drawn.",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 99,
            "description": "Font used to render tile characters.",
            "itemtype": "property",
            "name": "font",
            "type": "String",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 106,
            "description": "Device pixel ratio for high dpi screens.",
            "itemtype": "property",
            "name": "devicePixelRatio",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 113,
            "description": "Map view width in tiles.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 120,
            "description": "Map view height in tiles.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 127,
            "description": "The x distance in tiles from center to upper left corner of map view.",
            "itemtype": "property",
            "name": "offsetX",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 134,
            "description": "The y distance in tiles from center to upper left corner of map view.",
            "itemtype": "property",
            "name": "offsetY",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 141,
            "description": "The map tile x coord of the tile drawn in the upper left corner of the map view.",
            "itemtype": "property",
            "name": "originX",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 148,
            "description": "The map tile y coord of the tile drawn in the upper left corner of the map view.",
            "itemtype": "property",
            "name": "originY",
            "type": "Number",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 155,
            "description": "The map tile x coord of the tile currently being hovered by the mouse.",
            "itemtype": "property",
            "name": "hoveredTileX",
            "type": "Number|Null",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 162,
            "description": "The map tile y coord of the tile currently being hovered by the mouse.",
            "itemtype": "property",
            "name": "hoveredTileY",
            "type": "Number|Null",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 169,
            "description": "Placeholder to add extra draw functionality.\nSame params as this.draw\nfunction(ctx, map, entityManager, player, fov, lighting)",
            "params": [
                {
                    "name": "drawExtra",
                    "description": ""
                }
            ],
            "type": "{Function}",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 178,
            "description": "Resizes canvas elements to match the tileSize and map view with/height. Also adjusts behavior to accomodate high pixel density screens.",
            "itemtype": "method",
            "name": "resize",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 219,
            "description": "Draws map and entity tiles. All parameters will fall back to this.game.<param> if not provided.",
            "itemtype": "method",
            "name": "draw",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 261,
            "description": "Draws a single tile to the map view.",
            "itemtype": "method",
            "name": "drawTileToCanvas",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile coord on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile coord on the y axis.",
                    "type": "Number"
                },
                {
                    "name": "tileData",
                    "description": "- Object containing tile draw settings.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "char",
                            "description": "- The character to draw.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "- The color of the character displayed.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "bgColor",
                            "description": "- The background color of the tile.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "borderColor",
                            "description": "- The border color of the tile.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "borderWidth",
                            "description": "- The border width of the tile.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                },
                {
                    "name": "ctx",
                    "description": "- The canvas context to draw to.",
                    "type": "CanvasRenderingContext2D",
                    "optional": true,
                    "optdefault": "this.bufferCtx"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 368,
            "description": "Converts mouse pixel coords to map tile coords. Mouse pixel coords must be relative to the current window.",
            "itemtype": "method",
            "name": "mouseToTileCoords",
            "params": [
                {
                    "name": "x",
                    "description": "- Mouse pixel x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Mouse pixel y coord.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "{x: 0, y: 0}",
                "type": "Object|False"
            },
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 382,
            "description": "Converts map view pixel coords to map tile coords. Map view pixel coords are relative to the top left of the canvas element.",
            "itemtype": "method",
            "name": "pixelToTileCoords",
            "params": [
                {
                    "name": "x",
                    "description": "- Map view pixel x coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map view pixel y coord.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "{x: 0, y: 0}",
                "type": "Object|False"
            },
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 396,
            "description": "Sets the center map tile of the view.",
            "itemtype": "method",
            "name": "setCenter",
            "params": [
                {
                    "name": "centerX",
                    "description": "- Center map tile x coord.",
                    "type": "Number"
                },
                {
                    "name": "centerY",
                    "description": "- Center map tile y coord.",
                    "type": "Number"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 408,
            "description": "Fills the canvas with a given color.",
            "itemtype": "method",
            "name": "fillBg",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "this.bgColor"
                },
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D",
                    "optional": true,
                    "optdefault": "this.bufferCtx"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 425,
            "description": "Copies pixel data from the buffer canvas to the game canvas.",
            "itemtype": "method",
            "name": "drawBufferToCanvas",
            "class": "Renderer"
        },
        {
            "file": "src/renderer.js",
            "line": 449,
            "description": "The character to be drawn.",
            "itemtype": "property",
            "name": "char",
            "type": "{String|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 455,
            "description": "Character color.",
            "itemtype": "property",
            "name": "color",
            "type": "{css color|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 461,
            "description": "Background color.",
            "itemtype": "property",
            "name": "bgColor",
            "type": "{css color|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 467,
            "description": "Border color.\nIf false no border will be drawn.",
            "itemtype": "property",
            "name": "borderColor",
            "type": "{css color|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 474,
            "description": "Border width.\nIf `this.borderColor` is set `this.borderWidth` will default to 1 if not set.",
            "itemtype": "property",
            "name": "borderWidth",
            "type": "{Number|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 481,
            "description": "Character stroke color.",
            "itemtype": "property",
            "name": "charStrokeColor",
            "type": "{css color|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 487,
            "description": "Character stroke color.",
            "itemtype": "property",
            "name": "charStrokeColor",
            "type": "{css color|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 493,
            "description": "Character stroke width.\nIf `this.charStrokeColor` is set `this.charStrokeWidth` will default to 1 if not set.",
            "itemtype": "property",
            "name": "charStrokeWidth",
            "type": "{Number|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 500,
            "description": "Font to be used when drawing character.\nIf not set `Renderer.font` is used.",
            "itemtype": "property",
            "name": "font",
            "type": "{String|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 507,
            "description": "Font size to be used when drawing character.\nIf not set `Renderer.fontSize` is used.",
            "itemtype": "property",
            "name": "fontSize",
            "type": "{Number|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 514,
            "description": "Text alignment of character. Valid values: 'left', 'right', 'center', 'start', 'end'.",
            "itemtype": "property",
            "name": "textAlign",
            "type": "{String|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 520,
            "description": "Text baseling of character. Valid values: 'alphabetic', 'top', 'hanging', 'middle', 'ideographic', 'bottom'.",
            "itemtype": "property",
            "name": "textBaseline",
            "type": "{String|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 526,
            "description": "Pixel offset of character.",
            "itemtype": "property",
            "name": "offsetX",
            "type": "{Number|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/renderer.js",
            "line": 532,
            "description": "Pixel offset of character.",
            "itemtype": "property",
            "name": "offsetY",
            "type": "{Number|false}",
            "class": "TileDrawData"
        },
        {
            "file": "src/tile.js",
            "line": 35,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "{Game}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 42,
            "description": "Unique id for this tile.",
            "type": "{Number}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 48,
            "description": "The type of entity this is.\nWhen created this object is merged with the value of `Tile.Types[type]`. See constructor.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 56,
            "description": "Optional Callback. Called when the entity is first created. Intended to be assigned by Entity.Types.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "game",
                    "description": "- Game instance this obj is attached to.",
                    "type": "Game"
                },
                {
                    "name": "type",
                    "description": "- Type of tile. When created this object is merged with the value of Tile.Types[type].",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "- The map tile coordinate position of this tile on the x axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The map tile coordinate position of this tile on the y axis.",
                    "type": "Number"
                }
            ],
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 66,
            "description": "Display name for this tile.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 73,
            "description": "If this tile has been explored by the player.",
            "itemtype": "property",
            "name": "explored",
            "type": "{Bool}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 80,
            "description": "If entities can move through this tile.",
            "itemtype": "property",
            "name": "passable",
            "type": "{Bool}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 87,
            "description": "If this tile blocks line of sight.",
            "itemtype": "property",
            "name": "blocksLos",
            "type": "{Bool}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 94,
            "description": "The tile map tile x coord.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 101,
            "description": "The tile map tile y coord.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 108,
            "description": "The character displayed when rendering this tile.",
            "itemtype": "property",
            "name": "char",
            "type": "{String}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 115,
            "description": "The color of the character displayed when rendering this tile. Not rendered if evaluates to false.",
            "itemtype": "property",
            "name": "color",
            "type": "{String|bool}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 122,
            "description": "The background color the character displayed when rendering this tile. Not rendered if evaluates to false.",
            "itemtype": "property",
            "name": "bgColor",
            "type": "{String|bool}",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 129,
            "description": "Optional callback called when added to an `ObjectManager` or `MultiObjectManager`.",
            "metod": "onAdd",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 135,
            "description": "Optional callback called when removed from an `ObjectManager` or `MultiObjectManager`.",
            "metod": "onRemve",
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 141,
            "description": "Handles the behavior of a player or other entity attempting to move into this tile. Only used if this.passable = false.",
            "itemtype": "method",
            "name": "bump",
            "params": [
                {
                    "name": "entity",
                    "description": "- The player or entity attempting to move into this tile.",
                    "type": "Object"
                }
            ],
            "class": "Tile"
        },
        {
            "file": "src/tile.js",
            "line": 154,
            "description": "Handles entity entering a new tile.\nCalled after chaning the entities position",
            "itemtype": "method",
            "name": "onEntityEnter",
            "params": [
                {
                    "name": "entity",
                    "description": "- The entity entering the tile",
                    "type": "Entity"
                },
                {
                    "name": "x",
                    "description": "- Map tile coord.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile coord.",
                    "type": "Number"
                }
            ],
            "class": "Tile"
        },
        {
            "file": "src/util.js",
            "line": 51,
            "description": "List of 4 directions as strings.\nUsed to match property keys of `Util.DIRECTIONS_TO_OFFSETS`.",
            "itemtype": "property",
            "name": "DIRECTIONS_4",
            "type": "{Array}",
            "static": 1,
            "final": 1,
            "example": [
                "\n    [\n        'up',\n        'right',\n        'down',\n        'left',\n    ]"
            ],
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 68,
            "description": "List of 8 directions as strings.\nUsed to match property keys of `Util.DIRECTIONS_TO_OFFSETS`.",
            "itemtype": "property",
            "name": "DIRECTIONS_8",
            "type": "{Array}",
            "static": 1,
            "final": 1,
            "example": [
                "\n    [\n        'up',\n        'up_right',\n        'right',\n        'down_right',\n        'down',\n        'down_left',\n        'left',\n        'up_left',\n    ]"
            ],
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 89,
            "description": "Maps direction names their opposite direction name.",
            "itemtype": "property",
            "name": "DIRECTIONS_OPPOSITES",
            "type": "{Object}",
            "static": 1,
            "final": 1,
            "example": [
                "\n    {\n       up:           {x:  0, y: -1},\n       up_right:     {x:  1, y: -1},\n       right:        {x:  1, y:  0},\n       down_right:   {x:  1, y:  1},\n       down:         {x:  0, y:  1},\n       down_left:    {x: -1, y:  1},\n       left:         {x: -1, y:  0},\n       up_left:      {x: -1, y: -1}\n    }"
            ],
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 109,
            "description": "Maps direction names to coord offsets.",
            "itemtype": "property",
            "name": "DIRECTIONS_TO_OFFSETS",
            "type": "{Object}",
            "static": 1,
            "final": 1,
            "example": [
                "\n    {\n        'up': 'down',\n        'down': 'up',\n        'left': 'right',\n        'right': 'left',\n        'up_right': 'down_left',\n        'down_left': 'up_right',\n        'up_left': 'down_right',\n        'down_right': 'up_left'\n    };"
            ],
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 129,
            "description": "Merges settings with default values.",
            "itemtype": "method",
            "name": "mergeDefaults",
            "static": 1,
            "params": [
                {
                    "name": "defaults",
                    "description": "- Default values to merge with.",
                    "type": "Object"
                },
                {
                    "name": "settings",
                    "description": "- Settings to merge with default values.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new object with settings replacing defaults.",
                "type": "Object"
            },
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 149,
            "description": "Copy all of the properties in the source objects over to the destination object, and return the destination object.\nIt's in-order, so the last source will override properties of the same name in previous arguments.",
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "destination",
                    "description": "- The object to copy properties to.",
                    "type": "Object"
                },
                {
                    "name": "source",
                    "description": "- The object to copy properties from.",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The `destination` object.",
                "type": "Object"
            },
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 169,
            "description": "Gets the offset coords of a given direction.",
            "itemtype": "method",
            "name": "getOffsetCoordsFromDirection",
            "static": 1,
            "params": [
                {
                    "name": "direction",
                    "description": "- valid directions: [`up`, `down`, `left`, `right`, `up_left`, `up_right`, `down_left`, `down_right`];.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`{x: 0, y: 0}`",
                "type": "Object"
            },
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 183,
            "description": "Gets the distance in tile moves from point 1 to point 2.",
            "itemtype": "method",
            "name": "getTileMoveDistance",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "diagonalMovement",
                    "description": "true, calculate the distance taking into account diagonal movement.",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Util"
        },
        {
            "file": "src/util.js",
            "line": 201,
            "description": "Gets the distance from point 1 to point 2.",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Util"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 41,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "{Game}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 48,
            "description": "The x map tile coord to use as the origin of this target finder.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 55,
            "description": "The y map tile coord to use as the origin of this target finder.",
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 62,
            "description": "If set only targets within the given `FovROT` will be valid.",
            "itemtype": "property",
            "name": "limitToFov",
            "type": "{FovROT}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 69,
            "description": "Limit results to non-diagonal adjacent tiles",
            "itemtype": "property",
            "name": "limitToNonDiagonalAdjacent",
            "type": "{Boolean}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 76,
            "description": "Max distance in tiles target can be from origin.",
            "itemtype": "property",
            "name": "range",
            "type": "{Number}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 83,
            "description": "Array of valid target object types. Checked using `target instanceof type`.\nIf set to an empty array or a value evaluating to false, all types are considered valid.",
            "itemtype": "property",
            "name": "validTypes",
            "type": "{Array}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 91,
            "description": "If true tile objects are can be valid targets.",
            "itemtype": "property",
            "name": "includeTiles",
            "type": "{Boolean}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 98,
            "description": "If true valid targets are wraped in an object with x, y, range, value properties.",
            "itemtype": "property",
            "name": "prepareValidTargets",
            "type": "{Boolean}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 105,
            "description": "Function to filter objects when checking if they are valid. `function(obj){ return true }` .\nTargets must still be an instance of this.validTypes.",
            "itemtype": "property",
            "name": "filter",
            "type": "{Function}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 113,
            "description": "Object or Array of objects to exclude from results.",
            "itemtype": "property",
            "name": "exclude",
            "type": "{Object|Array}",
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 120,
            "description": "Gets all valid targets.",
            "itemtype": "method",
            "name": "getValidTargets",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 139,
            "description": "Get tile coords a valid target may be on. Only checking range and fov, not objects on the tile.",
            "itemtype": "method",
            "name": "getValidTargetTiles",
            "return": {
                "description": "of Tile objects",
                "type": "Array"
            },
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 186,
            "description": "Get valid target objects on a tile coord.",
            "itemtype": "method",
            "name": "getValidTargetsAtPosition",
            "params": [
                {
                    "name": "x",
                    "description": "- Map tile coord to get valid target objects from.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- Map tile coord to get valid target objects from.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "mixed objects",
                "type": "Array"
            },
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 206,
            "description": "Wraps a target object in a container object with x, y, range",
            "itemtype": "method",
            "name": "prepareTargetObject",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "target.x"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "target.y"
                },
                {
                    "name": "range",
                    "description": "range from `this.x`, `this.y` to x,y",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "result.value target object",
                "type": "Object"
            },
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 239,
            "description": "Checks if a target object is an instance of a type in `this.validTypes`.",
            "itemtype": "method",
            "name": "checkValidType",
            "params": [
                {
                    "name": "target",
                    "description": "- The target to be checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`true` if valid.",
                "type": "Bool"
            },
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets-finder.js",
            "line": 262,
            "description": "Checks if an object is a valid target for this action.",
            "itemtype": "method",
            "name": "checkValidTarget",
            "params": [
                {
                    "name": "target",
                    "description": "- The target to be checked.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`true` if valid.",
                "type": "Bool"
            },
            "class": "ValidTargetsFinder"
        },
        {
            "file": "src/valid-targets.js",
            "line": 35,
            "description": "Game instance this obj is attached to.",
            "itemtype": "property",
            "name": "game",
            "type": "{Game}",
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 42,
            "description": "Array of target objects.",
            "type": "{Array}",
            "itemtype": "property",
            "name": "targets",
            "readonly": "",
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 50,
            "description": "Map of target positions.",
            "type": "{MultiObjectManager}",
            "itemtype": "property",
            "name": "map",
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 58,
            "description": "Currently Selected Object.",
            "itemtype": "property",
            "name": "current",
            "type": "{Object}",
            "readonly": "",
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 66,
            "description": "Array of types in order of their sort priority.",
            "type": "{Array}",
            "itemtype": "property",
            "name": "typeSortPriority",
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 73,
            "description": "Sets the targets, replacing currently set ones.",
            "itemtype": "method",
            "name": "setTargets",
            "params": [
                {
                    "name": "targets",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 88,
            "description": "Sets the currently selected target object.",
            "itemtype": "method",
            "name": "setCurrent",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If target was found in `this.targets`. (only set if found).",
                "type": "Bool"
            },
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 103,
            "description": "Gets the currently selected target object.",
            "itemtype": "method",
            "name": "getCurrent",
            "params": [
                {
                    "name": "autoset",
                    "description": "- If no target is set to current autoset the first.",
                    "type": "Bool",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 119,
            "description": "Sets the object after the currently selected object to be the selected object.",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "The new currently selected object.",
                "type": "Object"
            },
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 139,
            "description": "Sets the object before the currently selected object to be the selected object.",
            "itemtype": "method",
            "name": "prev",
            "return": {
                "description": "The new currently selected object.",
                "type": "Object"
            },
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 160,
            "description": "Gets the sort priority of an object based on its type using 'this.typeSortPriority'.",
            "itemtype": "method",
            "name": "getTypeSortPriority",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 174,
            "description": "Sorts `this.targets` by `this.typeSortPriority` then by range.",
            "itemtype": "method",
            "name": "sort",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "ValidTargets"
        },
        {
            "file": "src/valid-targets.js",
            "line": 198,
            "description": "Finds a target object by its value.",
            "itemtype": "method",
            "name": "getTargetByValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ValidTargets"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: metod",
            "line": " src/entity.js:111"
        },
        {
            "message": "unknown tag: metod",
            "line": " src/entity.js:117"
        },
        {
            "message": "unknown tag: metod",
            "line": " src/player.js:128"
        },
        {
            "message": "unknown tag: metod",
            "line": " src/player.js:134"
        },
        {
            "message": "unknown tag: metod",
            "line": " src/tile.js:129"
        },
        {
            "message": "unknown tag: metod",
            "line": " src/tile.js:135"
        },
        {
            "message": "replacing incorrect tag: propery with property",
            "line": " src/valid-targets-finder.js:69"
        },
        {
            "message": "Missing item type\nUnique id for this entity.",
            "line": " src/entity.js:39"
        },
        {
            "message": "Missing item type\nOptional callback called when added to an `ObjectManager` or `MultiObjectManager`.",
            "line": " src/entity.js:111"
        },
        {
            "message": "Missing item type\nOptional callback called when removed from an `ObjectManager` or `MultiObjectManager`.",
            "line": " src/entity.js:117"
        },
        {
            "message": "Missing item type\nOptional callback called when added to an `ObjectManager` or `MultiObjectManager`.",
            "line": " src/player.js:128"
        },
        {
            "message": "Missing item type\nOptional callback called when removed from an `ObjectManager` or `MultiObjectManager`.",
            "line": " src/player.js:134"
        },
        {
            "message": "Missing item type\nTile data layers to draw",
            "line": " src/renderer.js:37"
        },
        {
            "message": "Missing item type\nPlaceholder to add extra draw functionality.\nSame params as this.draw\nfunction(ctx, map, entityManager, player, fov, lighting)",
            "line": " src/renderer.js:169"
        },
        {
            "message": "Missing item type\nUnique id for this tile.",
            "line": " src/tile.js:42"
        },
        {
            "message": "Missing item type\nOptional callback called when added to an `ObjectManager` or `MultiObjectManager`.",
            "line": " src/tile.js:129"
        },
        {
            "message": "Missing item type\nOptional callback called when removed from an `ObjectManager` or `MultiObjectManager`.",
            "line": " src/tile.js:135"
        }
    ]
}